//javascript for controlling Transit Ridership App
//written by Bill Hereth February 2022

//values will be generated by using string programatically built with eval()
//'Dx_' is a place holder for 'D1_' and 'D2_' in field names...
//'obj' is place holder for record object
//agg is how to combine both directions
var dRoadOptions = [
  {value:"Lanes"    ,label:"Lanes"                      , rndr: 'Lanes'        , agg:"sum" , numerator  : "obj['Dx_LANES']", denominator: "1"},
  {value:"Vol"      ,label:"Daily Volume (2-Way)"       , rndr: 'Vol'          , agg:"none", numerator  : "obj['DY_VOL']", denominator: "1"},
  {value:"AMSpd"    ,label:"AM Period Speeds % FreeFlow", rndr: 'Percent'      , agg:"min" , numerator  : "obj['Dx_AM_SPD'] * 100", denominator: "obj['FF_SPD']"},
  {value:"PMSpd"    ,label:"PM Period Speeds % FreeFlow", rndr: 'Percent'      , agg:"min" , numerator:   "obj['Dx_AM_SPD'] * 100", denominator: "obj['FF_SPD']"},
//{value:"AMVC"     ,label:"AM Period V/C Ratio"        , rndr: 'VC'           , agg:"max" , numerator  : "obj['Dx_AM_VOL'] + (0.5 * obj['Dx_AM_MD']) + obj['Dx_AM_HV']", denominator: "3 * obj['Dx_CAP1HL'] * obj['Dx_LANES']" }, //PCE in numerator MD * 1.5 and HV * 2
//{value:"PMVC"     ,label:"PM Period V/C Ratio"        , rndr: 'VC'           , agg:"max" , numerator:   "obj['Dx_PM_VOL'] + (0.5 * obj['Dx_PM_MD']) + obj['Dx_PM_HV']", denominator: "3 * obj['Dx_CAP1HL'] * obj['Dx_LANES']" }, //PCE in numerator MD * 1.5 and HV * 2
  {value:"VolTrk"   ,label:"Daily MD & HV Trucks"       , rndr: 'VolTrk'       , agg:"none", numerator  : "(obj['DY_MD'] + obj['DY_HV'])", denominator: "1"},
  {value:"VolTrkPer",label:"Daily % MD & HV Trucks"     , rndr: 'Percent_Truck', agg:"none", numerator  : "(obj['DY_MD'] + obj['DY_HV']) * 100", denominator: "obj['DY_VOL']"}
];
var curRoadOption       = "Vol";

var minScaleForLabels = 87804;
var labelClassOn;
var labelClassOff;
var sCWhite = "#FFFFFF";
var dHaloSize = 2.0;

var bindata;
var dataFNConv;

var tttR;

var iPixelSelectionTolerance = 5;

var renderer_Lanes;
var renderer_Lanes_Change;
var renderer_Vol;
var renderer_Vol_Change;
var renderer_VolTrk;
var renderer_VolTrk_Change;
var renderer_Percent;
var renderer_Percent_Change;
var rendererRoad;

var measureParams = [];

define(['dojo/_base/declare',
  'jimu/BaseWidget',
  'jimu/LayerInfos/LayerInfos',
  'dijit/registry',
  'dojo/dom',
  'dojo/dom-style',
  'dijit/dijit',
  'dojox/charting/Chart',
  'dojox/charting/themes/Claro',
  'dojox/charting/themes/Julie',
  'dojox/charting/SimpleTheme',
  'dojox/charting/plot2d/Scatter',
  'dojox/charting/plot2d/Markers',
  'dojox/charting/plot2d/Columns',
  'dojox/charting/widget/Legend',
  'dojox/charting/action2d/Tooltip',
  'dojox/layout/TableContainer',
  'dojox/layout/ScrollPane',
  'dijit/layout/ContentPane',
  'jimu/PanelManager',
  'dijit/form/TextBox',
  'dijit/form/ToggleButton',
  'jimu/LayerInfos/LayerInfos',
  'esri/tasks/query',
  'esri/tasks/QueryTask',
  'esri/layers/GraphicsLayer',
  'esri/layers/FeatureLayer',
  'esri/dijit/FeatureTable',
  'esri/symbols/SimpleFillSymbol',
  'esri/symbols/SimpleLineSymbol',
  'esri/symbols/SimpleMarkerSymbol',
  'esri/symbols/TextSymbol',
  'esri/symbols/Font',
  'esri/layers/LabelClass',
  'esri/InfoTemplate',
  'esri/Color',
  'esri/map',
  'esri/renderers/ClassBreaksRenderer',
  'esri/renderers/UniqueValueRenderer',
  'esri/geometry/Extent',
  'dojo/store/Memory',
  'dojox/charting/StoreSeries',
  'dijit/Dialog',
  'dijit/form/Button',
  'dijit/form/RadioButton',
  'dijit/form/MultiSelect',
  'dojox/form/CheckedMultiSelect',
  'dijit/form/Select',
  'dijit/form/ComboBox',
  'dijit/form/CheckBox',
  'dojo/store/Observable',
  'dojox/charting/axis2d/Default',
  'dojo/domReady!'],
function(declare, BaseWidget, LayerInfos, registry, dom, domStyle, dijit, Chart, Claro, Julie, SimpleTheme, Scatter, Markers, Columns, Legend, Tooltip, TableContainer, ScrollPane, ContentPane, PanelManager, TextBox, ToggleButton, LayerInfos, Query, QueryTask, GraphicsLayer, FeatureLayer, FeatureTable, SimpleFillSymbol, SimpleLineSymbol, SimpleMarkerSymbol, TextSymbol, Font, LabelClass, InfoTemplate, Color, Map, ClassBreaksRenderer, UniqueValueRenderer, Extent, Memory, StoreSeries, Dialog, Button, RadioButton, MutliSelect, CheckedMultiSelect, Select, ComboBox, CheckBox, Observable) {
  //To create a widget, you need to derive from BaseWidget.
  
  return declare([BaseWidget], {
    // DemoWidget code goes here

    //please note that this property is be set by the framework when widget is loaded.
    //templateString: template,

    baseClass: 'jimu-widget-demo',

    postCreate: function() {
      this.inherited(arguments);
      console.log('postCreate');
      
      tttR = this;
      
      try {
        dom.byId(tttR.id + "_panel").style.left = '55px'; // NEED TO FIND BETTER PLACE WHERE WIDGET IS CREATED RATHER THAN HERE
      } catch (err) {
        console.log(err.message);
      }
    },

    startup: function() {
      console.log('startup');
      this.inherited(arguments);
      //this.map.setInfoWindowOnClick(false); // turn off info window (popup) when clicking a feature

      //Daily Volume Renderers
      var aBrk_Vol = new Array(
        {minValue:   0.01, maxValue:     5999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[0]), 0.5000), label:   "Less than 6,000"},
        {minValue:   6000, maxValue:    17999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[1]), 1.1000), label:   "6,000 to 18,000"},
        {minValue:  18000, maxValue:    35999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[2]), 1.7000), label:  "18,000 to 36,000"},
        {minValue:  36000, maxValue:    71999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[3]), 2.3000), label:  "36,000 to 72,000"},
        {minValue:  72000, maxValue:   119999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[4]), 3.9000), label: "72,000 to 120,000"},
        {minValue: 120000, maxValue:   159999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[5]), 3.5000), label:"120,000 to 160,000"},
        {minValue: 160000, maxValue:   199999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[6]), 4.1000), label:"160,000 to 200,000"},
        {minValue: 200000, maxValue:   239999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[7]), 4.7000), label:"200,000 to 240,000"},
        {minValue: 240000, maxValue: Infinity, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[8]), 5.3000), label: "More than 240,000"}
      );
      renderer_Vol = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_Vol.length;j++) {
        renderer_Vol.addBreak(aBrk_Vol[j]);
      }
      var aBrk_Vol_Change = new Array(
        {minValue: -9999999, maxValue:   -25001, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[0]), 5.0000), label: "Less than -25,000"  },
        {minValue:   -25000, maxValue:   -10001, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[1]), 2.5000), label: "-25,000 to -10,000" },
        {minValue:   -10000, maxValue:    -5001, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[2]), 1.2500), label: "-10,000 to -5,000"  },
        {minValue:    -5000, maxValue:    -1001, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[3]), 0.6250), label: "-5,000 to -1,000"   },
        {minValue:    -1000, maxValue:      999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[4]), 0.3125), label: "-1,000 to +1,000"   },
        {minValue:     1000, maxValue:     4999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[5]), 0.6250), label: "+1,000 to +5,000"   },
        {minValue:     5000, maxValue:     9999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[6]), 1.2500), label: "+5,000 to +10,000"  },
        {minValue:    10000, maxValue:    24999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 2.5000), label: "+10,000 to +25,000" },
        {minValue:    25000, maxValue: Infinity, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[8]), 5.0000), label: "More than +25,000" }//,
//        {minValue:    80000, maxValue:   119999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"     ), 5.0000), label: "+80,000 to +120,000"},
//        {minValue:   120000, maxValue: Infinity, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"     ), 9.0000), label: "More than +120,000" }
      );
      renderer_Vol_Change = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_Vol_Change.length;j++) {
        renderer_Vol_Change.addBreak(aBrk_Vol_Change[j]);
      }

      //Lanes Renderers
      var aBrk_Lanes = new Array(
        {minValue:  1, maxValue:  3, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[0]), 0.50), label:"3 Lanes or Less" },
        {minValue:  4, maxValue:  5, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[1]), 1.25), label:"4 to 5 Lanes"    },
        {minValue:  6, maxValue:  7, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[2]), 2.00), label:"6 to 7 Lanes"    },
        {minValue:  8, maxValue:  9, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[3]), 2.75), label:"8 to 9 Lanes"    },
        {minValue: 10, maxValue: 11, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[4]), 3.50), label:"10 to 11 Lanes"  },
        {minValue: 12, maxValue: 13, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[5]), 4.25), label:"12 to 13 Lanes"  },
        {minValue: 14, maxValue: 15, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[6]), 5.00), label:"14 to 15 Lanes"  },
        {minValue: 16, maxValue: 17, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[7]), 5.75), label:"16 to 17 Lanes"  },
        {minValue: 18, maxValue: 99, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(laneColorData[8]), 6.50), label:"18 or More Lanes"}
      );
      renderer_Lanes = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_Lanes.length;j++) {
        renderer_Lanes.addBreak(aBrk_Lanes[j]);
      }
      var aBrk_Lanes_Change = new Array(
        {minValue: -99, maxValue: -4, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[0]), 5.0000), label: "-4 or More Lanes"},
        {minValue:  -3, maxValue: -3, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[1]), 3.7500), label: "-3 Lanes"        },
        {minValue:  -2, maxValue: -2, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[2]), 2.5000), label: "-2 Lanes"        },
        {minValue:  -1, maxValue: -1, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[3]), 1.2500), label: "-1 Lane"         },
        {minValue:   0, maxValue:  0, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[4]), 0.6250), label: "No Change"       },
        {minValue:   1, maxValue:  1, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[5]), 1.2500), label: "+1 Lane"         },
        {minValue:   2, maxValue:  2, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[6]), 2.5000), label: "+2 Lanes"        },
        {minValue:   3, maxValue:  3, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 3.7500), label: "+3 Lanes"        },
        {minValue:   4, maxValue: 99, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[8]), 5.0000), label: "+4 or More Lanes"}
      );
      renderer_Lanes_Change = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_Lanes_Change.length;j++) {
        renderer_Lanes_Change.addBreak(aBrk_Lanes_Change[j]);
      }

      // Percent Renderers
      var aBrk_Percent = new Array(
        {minValue:0.000001, maxValue:       10, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"       ), 5.50), label:"Less than 10%"},
        {minValue:      10, maxValue:       20, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[8]), 5.30), label:"10% to 20%"    },
        {minValue:      20, maxValue:       30, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[7]), 4.70), label:"20% to 30%"    },
        {minValue:      30, maxValue:       40, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[6]), 4.10), label:"30% to 40%"    },
        {minValue:      40, maxValue:       50, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[5]), 3.90), label:"40% to 50%"    },
        {minValue:      50, maxValue:       60, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[4]), 3.50), label:"50% to 60%"    },
        {minValue:      60, maxValue:       70, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[3]), 2.30), label:"60% to 70%"    },
        {minValue:      70, maxValue:       80, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[2]), 1.70), label:"70% to 80%"    },
        {minValue:      80, maxValue:       90, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[1]), 1.10), label:"80% to 90%"    },
        {minValue:      90, maxValue: Infinity, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[0]), 0.50), label:"More than 90%" }
      );
      renderer_Percent = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_Percent.length;j++) {
        renderer_Percent.addBreak(aBrk_Percent[j]);
      }
      renderer_Percent_Change = tttR.getPercentChangeRenderer_Reverse('DisplayValue');

      var aBrk_Percent_Truck = new Array(
        {minValue: 0.000000, maxValue:      7.5, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[0]), 0.50), label:"Less than 7.5%"},
        {minValue: 7.500001, maxValue:     10.0, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[1]), 1.10), label:"7.5% to 10.0%" },
        {minValue:10.000001, maxValue:     12.5, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[2]), 1.70), label:"10.0% to 12.5%"},
        {minValue:12.500001, maxValue:     15.0, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[3]), 2.30), label:"12.5% to 15.0%"},
        {minValue:15.000001, maxValue:     17.5, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[4]), 3.50), label:"15.0% to 17.5%"},
        {minValue:17.500001, maxValue:     20.0, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[5]), 3.90), label:"17.5% to 20.0%"},
        {minValue:20.000001, maxValue:     22.5, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[6]), 4.10), label:"20.0% to 22.5%"},
        {minValue:22.500001, maxValue:     25.0, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[7]), 4.70), label:"22.5% to 25.0%"},
        {minValue:25.000001, maxValue:     30.0, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[8]), 5.30), label:"25.0% to 30.0%"},
        {minValue:30.000001, maxValue: Infinity, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"       ), 5.50), label:"More than 30%" }
      );
      renderer_Percent_Truck = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_Percent_Truck.length;j++) {
        renderer_Percent_Truck.addBreak(aBrk_Percent_Truck[j]);
      }
      renderer_Percent_Truck_Change = tttR.getPercentChangeRenderer('DisplayValue');


      //Truck Volume Renderers
      var aBrk_VolTrk = new Array(
        {minValue:     0, maxValue:      599, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[0]), 0.5000), label: "Less than 600"   },
        {minValue:   600, maxValue:     1799, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[1]), 1.1000), label: "600 to 1,800"    },
        {minValue:  1800, maxValue:     3599, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[2]), 1.7000), label: "1,800 to 3,600"  },
        {minValue:  3600, maxValue:     7199, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[3]), 2.3000), label: "3,600 to 7,200"  },
        {minValue:  7200, maxValue:    11999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[4]), 3.9000), label: "7,200 to 12,000" },
        {minValue: 12000, maxValue:    15999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[5]), 3.5000), label: "12,000 to 16,000"},
        {minValue: 16000, maxValue:    19999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[6]), 4.1000), label: "16,000 to 20,000"},
        {minValue: 20000, maxValue:    23999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[7]), 4.7000), label: "20,000 to 24,000"},
        {minValue: 24000, maxValue: Infinity, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(bertColorData[8]), 5.3000), label: "More than 24,000"}
      );
      renderer_VolTrk = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_VolTrk.length;j++) {
        renderer_VolTrk.addBreak(aBrk_VolTrk[j]);
      }
      var aBrk_VolTrk_Change = new Array(
        {minValue: -999999, maxValue:   -10001, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[0]), 5.0000), label: "Less than -10,000"},
        {minValue:  -10000, maxValue:    -5001, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[1]), 2.5000), label: "-10,000 to -5,000"},
        {minValue:   -5000, maxValue:    -1501, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[2]), 1.2500), label: "-5,000 to -1,500" },
        {minValue:   -1500, maxValue:     -501, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[3]), 0.6250), label: "-1,500 to -500"   },
        {minValue:    -500, maxValue:      499, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[4]), 0.3125), label: "-500 to +500"     },
        {minValue:     500, maxValue:     1499, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[5]), 0.6250), label: "+100 to +1,500"   },
        {minValue:    1500, maxValue:     4999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[6]), 1.2500), label: "+1,500 to +5,000" },
        {minValue:    5000, maxValue:     9999, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 2.5000), label: "+5,000 to +10,000"},
        {minValue:   10000, maxValue: Infinity, symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[8]), 5.0000), label: "More than +10,000"}
      );
      renderer_VolTrk_Change = new ClassBreaksRenderer(null, 'DisplayValue');
      for (var j=0;j<aBrk_VolTrk_Change.length;j++) {
        renderer_VolTrk_Change.addBreak(aBrk_VolTrk_Change[j]);
      }

      renderer_VolTrkPer_Change = tttR.getPercentChangeRenderer('DisplayValue');

      // get data for field name conversion lookup
      dojo.xhrGet({
        url: "widgets/tttScenarioManager/data/segsummaries/_config_segsummary_fieldname_conversion.json",
        handleAs: "json",
        load: function(obj) {
            /* here, obj will already be a JS object deserialized from the JSON response */
            console.log('_config_segsummary_fieldname_conversion.json');
            dataFNConv = obj;
            tttR.updateParamEquationAndDisplay();
        },
        error: function(err) {
                /* this will execute if the response couldn't be converted to a JS object,
                        or if the request was unsuccessful altogether. */
        }
      });

      // create radio button option between which attributes to show
      var divRoadOptions = dom.byId("divRoadOptions");
      
      for (d in dRoadOptions) {

        if (dRoadOptions[d].value == curRoadOption) {
          bChecked = true;
        } else {
          bChecked = false;
        }
        
        var rbRoadOption = new RadioButton({ name:"RoadOption", label:dRoadOptions[d].label, id:"rb_" + dRoadOptions[d].value, value: dRoadOptions[d].value, checked: bChecked});
        rbRoadOption.startup();
        rbRoadOption.placeAt(divRoadOptions);
        
        dojo.create('label', {
          innerHTML: dRoadOptions[d].label,
          for: rbRoadOption.id
        }, divRoadOptions);
        
        dojo.place("<br/>", divRoadOptions);

        //Radio Buttons Change Event
        dom.byId("rb_" + dRoadOptions[d].value).onchange = function(isChecked) {
          if(isChecked) {
            curRoadOption = this.value;
            console.log('Radio button select: ' + curRoadOption);
            measureParams = [];
            tttR.updateParamEquationAndDisplay();
          }
        }
      }
    },

    updateParamEquationAndDisplay: function() {
      console.log('updateParamEquation');
      measureParams = dRoadOptions.find(o => o.value === curRoadOption)
            
      // get numerator and denominator
      _numerator   = measureParams['numerator'];
      _denominator = measureParams['denominator'];

      // replace values in string expression with actual variable names
      // replace direction 'Dx_' with 'D1_' and 'D2_'
      numeratorDirT    = _numerator;
      denominatorDirT  = _denominator;
      numeratorDir1   = _numerator  .replace('Dx','D1');
      denominatorDir1 = _denominator.replace('Dx','D1');
      numeratorDir2   = _numerator  .replace('Dx','D2');
      denominatorDir2 = _denominator.replace('Dx','D2');
      
      // field name conversion from SEGID field to JSON letter
      for (_ro in dataFNConv) {
        numeratorDirT   = numeratorDirT  .replace("'" + _ro + "'", "'" + dataFNConv[_ro] + "'");
        denominatorDirT = denominatorDirT.replace("'" + _ro + "'", "'" + dataFNConv[_ro] + "'");
        numeratorDir1   = numeratorDir1  .replace("'" + _ro + "'", "'" + dataFNConv[_ro] + "'");
        denominatorDir1 = denominatorDir1.replace("'" + _ro + "'", "'" + dataFNConv[_ro] + "'");
        numeratorDir2   = numeratorDir2  .replace("'" + _ro + "'", "'" + dataFNConv[_ro] + "'");
        denominatorDir2 = denominatorDir2.replace("'" + _ro + "'", "'" + dataFNConv[_ro] + "'");
      }

      tttR.updateRoadDisplay();
    },

    updateRoadDisplay: function() {
      console.log('updateRoadDisplay');

      if (measureParams==[] || measureParams.length==0) {
        console.log('Parameters Not Read In')
        return;
      }

      // clear all graphics
      tttR.map.graphics.clear();
      tttR.map.graphics.refresh();

      // select renderer
      if (curScenarioComp=='none') {
        if (curPCOption=='Abs') {
          rendererRoad = eval('renderer_' + measureParams['rndr']);
        } else {
          rendererRoad = tttR.getPercentChangeRenderer('DisplayValue');
        }
      } else {
          if (curPCOption=='Abs') {
            rendererRoad = eval('renderer_' + measureParams['rndr'] + '_Change');
          } else {
            rendererRoad = tttR.getPercentChangeRenderer('DisplayValue');
          }
      }

      // initialize query number
      //waitForQueries = 0;
      
      // run multiple times to avoid 2000 limit on returned features
      tttR._queryFeatures("1=1")
    //tttR._queryFeatures("SEGID <= '" + strMiddleSeg1 + "'");
    //tttR._queryFeatures("SEGID  > '" + strMiddleSeg1 + "' AND SEGID <= '" + strMiddleSeg2 + "'");
    //tttR._queryFeatures("SEGID  > '" + strMiddleSeg2 + "'");
    },

    _queryFeatures: function(_filterstring){ 

      var query, updateFeature;
      query = new Query();
      query.outFields = ['SEGID'];
      query.returnGeometry = true;
      //query.where = "1=1";
      query.where = _filterstring

      
      lyrSegments.queryFeatures(query,function(featureSet) {
        //Update values
        var resultCount = featureSet.features.length;


        for (var i = 0; i < resultCount; i++) {
          updateFeature = featureSet.features[i];
          _segid = updateFeature.attributes['SEGID']

          _ft = 0;

          _mainValue = 0;
          _compValue = 0;
          _dispValue = 0;

          _mainValue_Dir1 = 0;
          _mainValue_Dir2 = 0;

          _compValue_Dir1 = 0;
          _compValue_Dir2 = 0;

          _dispValue_Dir1 = 0;
          _dispValue_Dir2 = 0;

          _mainValue_numerator = 0;
          _compValue_numerator = 0;
          _dispValue_numerator = 0;

          _mainValue_denominator = 1;
          _compValue_denominator = 1;
          _dispValue_denominator = 1;

          var _segDataMain = dataRoadMain[_segid]
          var _segDataComp = dataRoadComp[_segid]

          try {
            _ft = _segDataMain[dataFNConv['FT']];
          } catch(err) {
            if (curScenarioComp!='none') {
              try {
                _ft = _segDataComp[dataFNConv['FT']];
              } catch(err) {

              }
            }
          }

          if (_ft>0) {
            
            // main value
            try {
              // caculate non-aggregated and directional values
              switch(measureParams['agg']) {
                case 'none':
                  _mainValue = eval(numeratorDirT.replaceAll('obj','_segDataMain')) / eval(denominatorDirT.replaceAll('obj','_segDataMain'));
                  break;
                case 'sum':
                case 'min':
                case 'max':
                  _mainValue_Dir1 = eval(numeratorDir1.replaceAll('obj','_segDataMain')) / eval(denominatorDir1.replaceAll('obj','_segDataMain'));
                  _mainValue_Dir2 = eval(numeratorDir2.replaceAll('obj','_segDataMain')) / eval(denominatorDir2.replaceAll('obj','_segDataMain'));
              }

              // calculate for aggregated results
              switch(measureParams['agg']) {
                case 'sum':
                    _mainValue += _mainValue_Dir1 + _mainValue_Dir2;
                  break;
                case 'min':
                  _mainValue = Math.min(_mainValue_Dir1, _mainValue_Dir2);
                  break;
                case 'max':
                  _mainValue = Math.max(_mainValue_Dir1, _mainValue_Dir2);
                  break;
                default:
                  // code block
              }
            } catch(err) {
              // error
            }

            // comp value
            if (curScenarioComp!='none') {  
              try {
                // caculate non-aggregated and directional values
                switch(measureParams['agg']) {
                  case 'none':
                    _compValue = eval(numeratorDirT.replaceAll('obj','_segDataComp')) / eval(denominatorDirT.replaceAll('obj','_segDataComp'));
                    break;
                  case 'sum':
                  case 'min':
                  case 'max':
                    _compValue_Dir1 = eval(numeratorDir1.replaceAll('obj','_segDataComp')) / eval(denominatorDir1.replaceAll('obj','_segDataComp'));
                    _compValue_Dir2 = eval(numeratorDir2.replaceAll('obj','_segDataComp')) / eval(denominatorDir2.replaceAll('obj','_segDataComp'));
                }

                // calculate for aggregated results
                switch(measureParams['agg']) {
                  case 'sum':
                      _compValue += _compValue_Dir1 + _compValue_Dir2;
                    break;
                  case 'min':
                    _compValue = Math.min(_compValue_Dir1, _compValue_Dir2);
                    break;
                  case 'max':
                    _compValue = Math.max(_compValue_Dir1, _compValue_Dir2);
                    break;
                  default:
                    // code block
                }
              } catch(err) {
                // error
              }
            }

            // calculate final display value based on selection (absolute or change)
            try {
              if (curPCOption=='Abs') { // absolute change
              _dispValue = _mainValue - _compValue;
              } else { // percent change
                if (_compValue>0) _dispValue = ((_mainValue - _compValue) / _compValue) * 100;
              }
            } catch(err) {
              _dispValue = _mainValue;
            }

            // set final display value
            updateFeature.attributes['DisplayValue'] = _dispValue;
            updateFeature.attributes['FT'] = _ft;

            // add feature to graphics layer
            tttR.map.graphics.add(updateFeature);
          }
        }

        lyrSegments.setRenderer(rendererRoad);

        tttR.map.graphics.setRenderer(rendererRoad);
        tttR.map.graphics.refresh();

      });
    },

    getPercentChangeRenderer: function(featureName) {
      renderer_PC_Change = new UniqueValueRenderer({
        type: "unique-value",  // autocasts as new UniqueValueRenderer()
        valueExpression: "var p = $feature." + featureName + ";" +
                         "var ft = $feature.FT;" +
                         "if      ( p< -200              && ft>=20) { return 'class_f1' ; }" +
                         "else if ((p<  -40 && p>= -200) && ft>=20) { return 'class_f2' ; }" +
                         "else if ((p<  -20 && p>=  -40) && ft>=20) { return 'class_f3' ; }" +
                         "else if ((p<   -5 && p>=  -20) && ft>=20) { return 'class_f4' ; }" +
                         "else if ((p<    5 && p>=   -5) && ft>=20) { return 'class_f5' ; }" +
                         "else if ((p<   20 && p>=    5) && ft>=20) { return 'class_f6' ; }" +
                         "else if ((p<   40 && p>=   20) && ft>=20) { return 'class_f7' ; }" +
                         "else if ((p<  100 && p>=   40) && ft>=20) { return 'class_f8' ; }" +
                         "else if ((p<  200 && p>=  100) && ft>=20) { return 'class_f9' ; }" +
                         "else if ((p<  400 && p>=  200) && ft>=20) { return 'class_f10'; }" +
                         "else if ( p>  400              && ft>=20) { return 'class_f11'; }" +
                         "else if ( p< -200              && ft <20) { return 'class_r1' ; }" +
                         "else if ((p<  -40 && p>= -200) && ft< 20) { return 'class_r2' ; }" +
                         "else if ((p<  -20 && p>=  -40) && ft< 20) { return 'class_r3' ; }" +
                         "else if ((p<   -5 && p>=  -20) && ft< 20) { return 'class_r4' ; }" +
                         "else if ((p<    5 && p>=   -5) && ft< 20) { return 'class_r5' ; }" +
                         "else if ((p<   20 && p>=    5) && ft< 20) { return 'class_r6' ; }" +
                         "else if ((p<   40 && p>=   20) && ft< 20) { return 'class_r7' ; }" +
                         "else if ((p<  100 && p>=   40) && ft< 20) { return 'class_r8' ; }" +
                         "else if ((p<  200 && p>=  100) && ft< 20) { return 'class_r9' ; }" +
                         "else if ((p<  400 && p>=  200) && ft< 20) { return 'class_r10'; }" +
                         "else if ( p>  400              && ft< 20) { return 'class_r11'; }",
        uniqueValueInfos: [{value:"class_f1",  label:"Freeway Less than -200%" , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[0]), 6.0000)},
                           {value:"class_f2",  label:"Freeway -200% to -40%"   , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[1]), 5.5000)},
                           {value:"class_f3",  label:"Freeway -40% to -20%"    , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[2]), 4.2500)},
                           {value:"class_f4",  label:"Freeway -20% to -5%"     , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[3]), 3.6250)},
                           {value:"class_f5",  label:"Freeway -5% to +5%"      , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[4]), 2.3125)},
                           {value:"class_f6",  label:"Freeway +5% to +20%"     , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[5]), 2.6250)},
                           {value:"class_f7",  label:"Freeway +20% to +40%"    , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[6]), 3.2500)},
                           {value:"class_f8",  label:"Freeway +40% to +100%"   , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 4.5000)},
                           {value:"class_f9",  label:"Freeway +100% to +200%"  , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[8]), 5.5000)},
                           {value:"class_f10", label:"Freeway +200% to +400%"  , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"),      6.0000)},
                           {value:"class_f11", label:"Freeway More than +400%" , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"),      7.0000)},
                           {value:"class_r1",  label:"Arterial Less than -200%", symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[0]), 2.2500)},
                           {value:"class_r2",  label:"Arterial -200% to -40%"  , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[1]), 1.5000)},
                           {value:"class_r3",  label:"Arterial -40% to -20%"   , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[2]), 1.2500)},
                           {value:"class_r4",  label:"Arterial -20% to -5%"    , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[3]), 0.6250)},
                           {value:"class_r5",  label:"Arterial -5% to +5%"     , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[4]), 0.3125)},
                           {value:"class_r6",  label:"Arterial +5% to +20%"    , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[5]), 0.6250)},
                           {value:"class_r7",  label:"Arterial +20% to +40%"   , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[6]), 1.2500)},
                           {value:"class_r8",  label:"Arterial +40% to +100%"  , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 1.5000)},
                           {value:"class_r9",  label:"Arterial +100% to +200%" , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[8]), 2.2500)},
                           {value:"class_r10", label:"Arterial +200% to +400%" , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"),      2.5000)},
                           {value:"class_r11", label:"Arterial More than +400%", symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"),      3.0000)}]
      });
      return renderer_PC_Change;
    },

    getPercentChangeRenderer_Reverse: function(featureName) {
      renderer_PC_Change = new UniqueValueRenderer({
        type: "unique-value",  // autocasts as new UniqueValueRenderer()
        valueExpression: "var p = $feature." + featureName + ";" +
                         "var ft = $feature.FT;" +
                         "if      ( p< -200              && ft>=20) { return 'class_f1' ; }" +
                         "else if ((p<  -40 && p>= -200) && ft>=20) { return 'class_f2' ; }" +
                         "else if ((p<  -20 && p>=  -40) && ft>=20) { return 'class_f3' ; }" +
                         "else if ((p<   -5 && p>=  -20) && ft>=20) { return 'class_f4' ; }" +
                         "else if ((p<    5 && p>=   -5) && ft>=20) { return 'class_f5' ; }" +
                         "else if ((p<   20 && p>=    5) && ft>=20) { return 'class_f6' ; }" +
                         "else if ((p<   40 && p>=   20) && ft>=20) { return 'class_f7' ; }" +
                         "else if ((p<  100 && p>=   40) && ft>=20) { return 'class_f8' ; }" +
                         "else if ((p<  200 && p>=  100) && ft>=20) { return 'class_f9' ; }" +
                         "else if ((p<  400 && p>=  200) && ft>=20) { return 'class_f10'; }" +
                         "else if ( p>  400              && ft>=20) { return 'class_f11'; }" +
                         "else if ( p< -200              && ft <20) { return 'class_r1' ; }" +
                         "else if ((p<  -40 && p>= -200) && ft< 20) { return 'class_r2' ; }" +
                         "else if ((p<  -20 && p>=  -40) && ft< 20) { return 'class_r3' ; }" +
                         "else if ((p<   -5 && p>=  -20) && ft< 20) { return 'class_r4' ; }" +
                         "else if ((p<    5 && p>=   -5) && ft< 20) { return 'class_r5' ; }" +
                         "else if ((p<   20 && p>=    5) && ft< 20) { return 'class_r6' ; }" +
                         "else if ((p<   40 && p>=   20) && ft< 20) { return 'class_r7' ; }" +
                         "else if ((p<  100 && p>=   40) && ft< 20) { return 'class_r8' ; }" +
                         "else if ((p<  200 && p>=  100) && ft< 20) { return 'class_r9' ; }" +
                         "else if ((p<  400 && p>=  200) && ft< 20) { return 'class_r10'; }" +
                         "else if ( p>  400              && ft< 20) { return 'class_r11'; }",
        uniqueValueInfos: [{value:"class_f1",  label:"Freeway Less than -200%" , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"     ), 6.0000)},
                           {value:"class_f2",  label:"Freeway -200% to -40%"   , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"     ), 5.5000)},
                           {value:"class_f3",  label:"Freeway -40% to -20%"    , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[8]), 4.2500)},
                           {value:"class_f4",  label:"Freeway -20% to -5%"     , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 3.6250)},
                           {value:"class_f5",  label:"Freeway -5% to +5%"      , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[6]), 2.3125)},
                           {value:"class_f6",  label:"Freeway +5% to +20%"     , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[5]), 2.6250)},
                           {value:"class_f7",  label:"Freeway +20% to +40%"    , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[4]), 3.2500)},
                           {value:"class_f8",  label:"Freeway +40% to +100%"   , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[3]), 4.5000)},
                           {value:"class_f9",  label:"Freeway +100% to +200%"  , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[2]), 5.5000)},
                           {value:"class_f10", label:"Freeway +200% to +400%"  , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[1]), 6.0000)},
                           {value:"class_f11", label:"Freeway More than +400%" , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[0]), 7.0000)},
                           {value:"class_r1",  label:"Arterial Less than -200%", symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"     ), 2.2500)},
                           {value:"class_r2",  label:"Arterial -200% to -40%"  , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex("#000000"     ), 1.5000)},
                           {value:"class_r3",  label:"Arterial -40% to -20%"   , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[8]), 1.2500)},
                           {value:"class_r4",  label:"Arterial -20% to -5%"    , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[7]), 0.6250)},
                           {value:"class_r5",  label:"Arterial -5% to +5%"     , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[6]), 0.3125)},
                           {value:"class_r6",  label:"Arterial +5% to +20%"    , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[5]), 0.6250)},
                           {value:"class_r7",  label:"Arterial +20% to +40%"   , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[4]), 1.2500)},
                           {value:"class_r8",  label:"Arterial +40% to +100%"  , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[3]), 1.5000)},
                           {value:"class_r9",  label:"Arterial +100% to +200%" , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[2]), 2.2500)},
                           {value:"class_r10", label:"Arterial +200% to +400%" , symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[1]), 2.5000)},
                           {value:"class_r11", label:"Arterial More than +400%", symbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, Color.fromHex(aCR_Change9[0]), 3.0000)}]
      });
      return renderer_PC_Change;
    },
    numberWithCommas: function(x) {
      return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    },
        
    setLegendBar: function() {
      console.log('setLegendBar');

      var _sLegend = 'Number of Daily Riders per Link'

      dom.byId("LegendName").innerHTML = _sLegend;

      if (typeof bertColorData !== 'undefined') {
        for (var i=0;i<bertColorData.length;i++)
          dom.byId("divColor" + (i + 1).toString()).style.backgroundColor = bertColorData[i];
      }
    },

    showLegend: function(){
      console.log('showLegend');
      var pm = PanelManager.getInstance();
      var bOpen = false;
      
      //Close Legend Widget if open
      for (var p=0; p < pm.panels.length; p++) {
        if (pm.panels[p].label == "Legend") {
          if (pm.panels[p].state != "closed") {
            bOpen=true;
            pm.closePanel(pm.panels[p]);
          }
        }
      }
    
      if (!bOpen) {
        //pm.showPanel(this.appConfig.widgetOnScreen.widgets[WIDGETPOOLID_LEGEND]);
      }
    },

    checkVolLabel: function() {
      console.log('checkVolLabel');
      if (dom.byId("chkLabels").checked == true) {
        lyrLinks[this.getCurDispLayerLoc()].setLabelingInfo([ labelClassOn  ] );
      } else {
        lyrLinks[this.getCurDispLayerLoc()].setLabelingInfo([ labelClassOff ]);
      }
      
    },
    
    getMethods: function (obj) 
    {
      var res = [];
      for(var m in obj) {
        if(typeof obj[m] == "function") {
          res.push(m)
        }
      }
      return res;
    },

    onOpen: function(){
      console.log('onOpen');
      tttR.updateRoadDisplay();
      lastOpenedWidget = 'road';
    },

    onClose: function(){
      //this.ClickClearButton();
      console.log('onClose');
    },

    onMinimize: function(){
      console.log('onMinimize');
    },

    onMaximize: function(){
      console.log('onMaximize');
    },

    onSignIn: function(credential){
      /* jshint unused:false*/
      console.log('onSignIn');
    },

    onSignOut: function(){
      console.log('onSignOut');
    },

    //added from Demo widget Setting.js
    setConfig: function(config){
      //this.textNode.value = config.districtfrom;
    var test = "";
    },

    getConfigFrom: function(){
      //WAB will get config object through this method
      return {
        //districtfrom: this.textNode.value
      };
    },

    //Receiving messages from other widgets
    onReceiveData: function(name, widgetId, data, historyData) {
      //filter out messages
      if(data.message=='road'){
        tttR.updateRoadDisplay();
      } else if(data.message=='road_zoom'){
        tttR.updateRoadDisplay();
      }
    },
  });
});